### base
java.library.path: "<%= node[:storm][:java_lib_path] %>"
storm.local.dir: "<%= node[:storm][:local_dir] %>"
storm.local.mode.zmq: <%= node[:storm][:local_mode_zmq] %>
storm.cluster.mode: "<%= node[:storm][:cluster_mode] %>"



### zookeeper.*
storm.zookeeper.servers:
<% @zookeeper_quorum.each do |host| -%>
    - "<%= host %>"
<% end -%>
storm.zookeeper.port: <%= node[:storm][:zookeeper][:port] %>
storm.zookeeper.root: "<%= node[:storm][:zookeeper][:root] %>"
storm.zookeeper.session.timeout: <%= node[:storm][:zookeeper][:session_timeout] %>
storm.zookeeper.retry.times: <%= node[:storm][:zookeeper][:retry_times] %>
storm.zookeeper.retry.interval: <%= node[:storm][:zookeeper][:retry_interval] %>



### supervisor.* configs are for node supervisors
supervisor.slots.ports:
<% for i in 0..(node[:storm][:supervisor][:workers]-1) -%>
    - <%= 6700+i -%>

<% end -%>
supervisor.childopts: "<%= node[:storm][:supervisor][:childopts] %>"
supervisor.worker.start.timeout.secs: <%= node[:storm][:supervisor][:worker_start_timeout] %>
supervisor.worker.timeout.secs: <%= node[:storm][:supervisor][:worker_timeout_secs] %>
supervisor.monitor.frequency.secs: <%= node[:storm][:supervisor][:monitor_frequecy_secs] %>
supervisor.heartbeat.frequency.secs: <%= node[:storm][:supervisor][:heartbeat_frequency_secs] %>
supervisor.enable: <%= node[:storm][:supervisor][:enable] %>



### worker.* configs are for task workers
worker.childopts: "<%= node[:storm][:worker][:childopts] %>"
worker.heartbeat.frequency.secs: <%= node[:storm][:worker][:heartbeat_frequency_secs] %>
task.heartbeat.frequency.secs: <%= node[:storm][:task][:heartbeat_frequency_secs] %>
task.refresh.poll.secs: <%= node[:storm][:task][:refresh_poll_secs] %>
zmq.threads: <%= node[:storm][:zmq][:threads] %>
zmq.linger.millis: <%= node[:storm][:zmq][:longer_millis] %>



### nimbus.* configs are for the master
nimbus.host: "<%= @nimbus[:fqdn] %>"
nimbus.thrift.port: <%= node[:storm][:nimbus][:thrift_port] %>
nimbus.childopts: "<%= node[:storm][:nimbus][:childopts] %>"
nimbus.task.timeout.secs: <%= node[:storm][:nimbus][:task_timeout_secs] %>
nimbus.supervisor.timeout.secs: <%= node[:storm][:nimbus][:supervisor_timeout_secs] %>
nimbus.monitor.freq.secs: <%= node[:storm][:nimbus][:monitor_freq_secs] %>
nimbus.cleanup.inbox.freq.secs: <%= node[:storm][:nimbus][:cleanup_inbox_freq_secs] %>
nimbus.inbox.jar.expiration.secs: <%= node[:storm][:nimbus][:inbox_jar_expiration_secs] %>
nimbus.task.launch.secs: <%= node[:storm][:nimbus][:task_launch_secs] %>
nimbus.reassign: <%= node[:storm][:nimbus][:reassign] %>
nimbus.file.copy.expiration.secs: <%= node[:storm][:nimbus][:file_copy_expiration_secs] %>



### ui.* configs are for the master
ui.port: <%= node[:storm][:ui][:port] %>
ui.childopts: "<%= node[:storm][:ui][:childopts] %>"



### drpc.* configs
drpc.port: <%= node[:storm][:drpc][:port] %>
drpc.invocations.port: <%= node[:storm][:drpc][:invocations_port] %>
drpc.request.timeout.secs: <%= node[:storm][:drpc][:request_timeout_secs] %>



### transactional.* configs
transactional.zookeeper.servers:
<% @zookeeper_quorum.each do |host| -%>
    - "<%= host %>"
<% end -%>
transactional.zookeeper.root: "<%= node[:storm][:transactional][:zookeeper][:root] %>"
transactional.zookeeper.port: <%= node[:storm][:transactional][:zookeeper][:port] %>



### topology.* configs are for specific executing storms
topology.debug: <%= node[:storm][:topology][:debug] %>
topology.optimize: <%= node[:storm][:topology][:optimize] %>
topology.workers: <%= node[:storm][:topology][:workers] %>
topology.acker.executors: <%= node[:storm][:topology][:acker_executors] %>
topology.acker.tasks: <%= node[:storm][:topology][:acker_tasks] %>
topology.tasks: <%= node[:storm][:topology][:tasks] %>
topology.message.timeout.secs: <%= node[:storm][:topology][:message_timeout_secs] %>
topology.skip.missing.kryo.registrations: <%= node[:storm][:topology][:skip_missing_kryo_registrations] %>
topology.max.task.parallelism: <%= node[:storm][:topology][:max_task_parallelism] %>
topology.max.spout.pending: <%= node[:storm][:topology][:max_spout_pending] %>
topology.state.synchronization.timeout.secs: <%= node[:storm][:topology][:state_synchronization_timeout_secs] %>
topology.stats.sample.rate: <%= node[:storm][:topology][:stats_sample_rate] %>
topology.fall.back.on.java.serialization: <%= node[:storm][:topology][:fall_back_on_java_serialization] %>
topology.worker.childopts: <%= node[:storm][:topology][:worker_childopts] %>


